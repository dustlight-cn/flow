"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 流程服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@goodvoice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = exports.InstanceObjectStatusEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var InstanceObjectStatusEnum;
(function (InstanceObjectStatusEnum) {
    InstanceObjectStatusEnum["Active"] = "ACTIVE";
    InstanceObjectStatusEnum["Canceled"] = "CANCELED";
    InstanceObjectStatusEnum["Completed"] = "COMPLETED";
    InstanceObjectStatusEnum["Incident"] = "INCIDENT";
    InstanceObjectStatusEnum["Resolved"] = "RESOLVED";
})(InstanceObjectStatusEnum = exports.InstanceObjectStatusEnum || (exports.InstanceObjectStatusEnum = {}));
/**
 * DefaultApi - axios parameter creator
 * @export
 */
const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 通过 ID 取消运行实例
         * @param {number} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInstance: (id, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('cancelInstance', 'id', id);
            const localVarPath = `/v1/instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 创建流程实例
         * @param {string} name
         * @param {{ [key: string]: object; }} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstance: (name, requestBody, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('createInstance', 'name', name);
            // verify required parameter 'requestBody' is not null or undefined
            common_1.assertParamExists('createInstance', 'requestBody', requestBody);
            const localVarPath = `/v1/instance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "auth", [], configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 发布消息
         * @param {string} name
         * @param {string} key
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage: (name, key, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('createMessage', 'name', name);
            // verify required parameter 'key' is not null or undefined
            common_1.assertParamExists('createMessage', 'key', key);
            const localVarPath = `/v1/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "auth", [], configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 创建流程
         * @param {string} body
         * @param {string} [cid]
         * @param {boolean} [base64]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcess: (body, cid, base64, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            common_1.assertParamExists('createProcess', 'body', body);
            const localVarPath = `/v1/process`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            if (base64 !== undefined) {
                localVarQueryParameter['base64'] = base64;
            }
            localVarHeaderParameter['Content-Type'] = 'application/xml';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 通过 ID 获取流程实例
         * @param {number} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance: (id, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('getInstance', 'id', id);
            const localVarPath = `/v1/instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 查询流程实例
         * @param {string} [name]
         * @param {number} [version]
         * @param {Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>} [status]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances: (name, version, status, page, size, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "auth", [], configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }
            if (status) {
                localVarQueryParameter['status'] = Array.from(status);
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 通过名称获取流程
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess: (name, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('getProcess', 'name', name);
            const localVarPath = `/v1/process/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 通过名称与版本号获取流程
         * @param {string} name
         * @param {number} version
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess1: (name, version, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('getProcess1', 'name', name);
            // verify required parameter 'version' is not null or undefined
            common_1.assertParamExists('getProcess1', 'version', version);
            const localVarPath = `/v1/process/{name}/{version}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取流程列表
         * @param {string} [q]
         * @param {string} [cid]
         * @param {number} [page]
         * @param {number} [size]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcesses: (q, cid, page, size, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/processes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "auth", [], configuration);
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.DefaultApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary 通过 ID 取消运行实例
         * @param {number} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInstance(id, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelInstance(id, cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 创建流程实例
         * @param {string} name
         * @param {{ [key: string]: object; }} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstance(name, requestBody, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createInstance(name, requestBody, cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 发布消息
         * @param {string} name
         * @param {string} key
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage(name, key, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMessage(name, key, cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 创建流程
         * @param {string} body
         * @param {string} [cid]
         * @param {boolean} [base64]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcess(body, cid, base64, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createProcess(body, cid, base64, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 通过 ID 获取流程实例
         * @param {number} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance(id, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getInstance(id, cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 查询流程实例
         * @param {string} [name]
         * @param {number} [version]
         * @param {Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>} [status]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances(name, version, status, page, size, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getInstances(name, version, status, page, size, cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 通过名称获取流程
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess(name, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProcess(name, cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 通过名称与版本号获取流程
         * @param {string} name
         * @param {number} version
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess1(name, version, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProcess1(name, version, cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取流程列表
         * @param {string} [q]
         * @param {string} [cid]
         * @param {number} [page]
         * @param {number} [size]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcesses(q, cid, page, size, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProcesses(q, cid, page, size, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.DefaultApiFp(configuration);
    return {
        /**
         *
         * @summary 通过 ID 取消运行实例
         * @param {number} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInstance(id, cid, options) {
            return localVarFp.cancelInstance(id, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 创建流程实例
         * @param {string} name
         * @param {{ [key: string]: object; }} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstance(name, requestBody, cid, options) {
            return localVarFp.createInstance(name, requestBody, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 发布消息
         * @param {string} name
         * @param {string} key
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage(name, key, cid, options) {
            return localVarFp.createMessage(name, key, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 创建流程
         * @param {string} body
         * @param {string} [cid]
         * @param {boolean} [base64]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcess(body, cid, base64, options) {
            return localVarFp.createProcess(body, cid, base64, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 通过 ID 获取流程实例
         * @param {number} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance(id, cid, options) {
            return localVarFp.getInstance(id, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 查询流程实例
         * @param {string} [name]
         * @param {number} [version]
         * @param {Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>} [status]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances(name, version, status, page, size, cid, options) {
            return localVarFp.getInstances(name, version, status, page, size, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 通过名称获取流程
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess(name, cid, options) {
            return localVarFp.getProcess(name, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 通过名称与版本号获取流程
         * @param {string} name
         * @param {number} version
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess1(name, version, cid, options) {
            return localVarFp.getProcess1(name, version, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取流程列表
         * @param {string} [q]
         * @param {string} [cid]
         * @param {number} [page]
         * @param {number} [size]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcesses(q, cid, page, size, options) {
            return localVarFp.getProcesses(q, cid, page, size, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     *
     * @summary 通过 ID 取消运行实例
     * @param {number} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    cancelInstance(id, cid, options) {
        return exports.DefaultApiFp(this.configuration).cancelInstance(id, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 创建流程实例
     * @param {string} name
     * @param {{ [key: string]: object; }} requestBody
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createInstance(name, requestBody, cid, options) {
        return exports.DefaultApiFp(this.configuration).createInstance(name, requestBody, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 发布消息
     * @param {string} name
     * @param {string} key
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createMessage(name, key, cid, options) {
        return exports.DefaultApiFp(this.configuration).createMessage(name, key, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 创建流程
     * @param {string} body
     * @param {string} [cid]
     * @param {boolean} [base64]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createProcess(body, cid, base64, options) {
        return exports.DefaultApiFp(this.configuration).createProcess(body, cid, base64, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 通过 ID 获取流程实例
     * @param {number} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getInstance(id, cid, options) {
        return exports.DefaultApiFp(this.configuration).getInstance(id, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 查询流程实例
     * @param {string} [name]
     * @param {number} [version]
     * @param {Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>} [status]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getInstances(name, version, status, page, size, cid, options) {
        return exports.DefaultApiFp(this.configuration).getInstances(name, version, status, page, size, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 通过名称获取流程
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getProcess(name, cid, options) {
        return exports.DefaultApiFp(this.configuration).getProcess(name, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 通过名称与版本号获取流程
     * @param {string} name
     * @param {number} version
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getProcess1(name, version, cid, options) {
        return exports.DefaultApiFp(this.configuration).getProcess1(name, version, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取流程列表
     * @param {string} [q]
     * @param {string} [cid]
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getProcesses(q, cid, page, size, options) {
        return exports.DefaultApiFp(this.configuration).getProcesses(q, cid, page, size, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DefaultApi = DefaultApi;
