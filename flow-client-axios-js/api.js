"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 流程服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@dustlight.cn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserTasksApi = exports.UserTasksApiFactory = exports.UserTasksApiFp = exports.UserTasksApiAxiosParamCreator = exports.TriggersApi = exports.TriggersApiFactory = exports.TriggersApiFp = exports.TriggersApiAxiosParamCreator = exports.ProcessesApi = exports.ProcessesApiFactory = exports.ProcessesApiFp = exports.ProcessesApiAxiosParamCreator = exports.MessagesApi = exports.MessagesApiFactory = exports.MessagesApiFp = exports.MessagesApiAxiosParamCreator = exports.InstancesApi = exports.InstancesApiFactory = exports.InstancesApiFp = exports.InstancesApiAxiosParamCreator = exports.InstanceObjectStatusEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var InstanceObjectStatusEnum;
(function (InstanceObjectStatusEnum) {
    InstanceObjectStatusEnum["Active"] = "ACTIVE";
    InstanceObjectStatusEnum["Canceled"] = "CANCELED";
    InstanceObjectStatusEnum["Completed"] = "COMPLETED";
    InstanceObjectStatusEnum["Incident"] = "INCIDENT";
    InstanceObjectStatusEnum["Resolved"] = "RESOLVED";
})(InstanceObjectStatusEnum = exports.InstanceObjectStatusEnum || (exports.InstanceObjectStatusEnum = {}));
/**
 * InstancesApi - axios parameter creator
 * @export
 */
const InstancesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 通过 ID 取消运行实例
         * @param {number} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInstance: (id, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('cancelInstance', 'id', id);
            const localVarPath = `/v1/instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 创建流程实例
         * @param {string} name
         * @param {{ [key: string]: object; }} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstance: (name, requestBody, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('createInstance', 'name', name);
            // verify required parameter 'requestBody' is not null or undefined
            (0, common_1.assertParamExists)('createInstance', 'requestBody', requestBody);
            const localVarPath = `/v1/instance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 通过 ID 获取流程实例
         * @param {number} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance: (id, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getInstance', 'id', id);
            const localVarPath = `/v1/instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取实例变量
         * @param {number} id
         * @param {number} scope
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceVariables: (id, scope, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getInstanceVariables', 'id', id);
            // verify required parameter 'scope' is not null or undefined
            (0, common_1.assertParamExists)('getInstanceVariables', 'scope', scope);
            const localVarPath = `/v1/instance/{id}/variables/{scope}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 查询流程实例
         * @param {string} [name]
         * @param {number} [version]
         * @param {Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>} [status]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances: (name, version, status, page, size, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }
            if (status) {
                localVarQueryParameter['status'] = Array.from(status);
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 通过 ID 重试实例
         * @param {number} id
         * @param {number} scope
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolve: (id, scope, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('resolve', 'id', id);
            // verify required parameter 'scope' is not null or undefined
            (0, common_1.assertParamExists)('resolve', 'scope', scope);
            const localVarPath = `/v1/instance/{id}/resolve/{scope}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 设置实例变量
         * @param {number} id
         * @param {number} scope
         * @param {{ [key: string]: object; }} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInstanceVariables: (id, scope, requestBody, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('setInstanceVariables', 'id', id);
            // verify required parameter 'scope' is not null or undefined
            (0, common_1.assertParamExists)('setInstanceVariables', 'scope', scope);
            // verify required parameter 'requestBody' is not null or undefined
            (0, common_1.assertParamExists)('setInstanceVariables', 'requestBody', requestBody);
            const localVarPath = `/v1/instance/{id}/variables/{scope}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.InstancesApiAxiosParamCreator = InstancesApiAxiosParamCreator;
/**
 * InstancesApi - functional programming interface
 * @export
 */
const InstancesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.InstancesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary 通过 ID 取消运行实例
         * @param {number} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInstance(id, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelInstance(id, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 创建流程实例
         * @param {string} name
         * @param {{ [key: string]: object; }} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstance(name, requestBody, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createInstance(name, requestBody, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 通过 ID 获取流程实例
         * @param {number} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance(id, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getInstance(id, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取实例变量
         * @param {number} id
         * @param {number} scope
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceVariables(id, scope, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getInstanceVariables(id, scope, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 查询流程实例
         * @param {string} [name]
         * @param {number} [version]
         * @param {Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>} [status]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances(name, version, status, page, size, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getInstances(name, version, status, page, size, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 通过 ID 重试实例
         * @param {number} id
         * @param {number} scope
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolve(id, scope, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.resolve(id, scope, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 设置实例变量
         * @param {number} id
         * @param {number} scope
         * @param {{ [key: string]: object; }} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInstanceVariables(id, scope, requestBody, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.setInstanceVariables(id, scope, requestBody, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.InstancesApiFp = InstancesApiFp;
/**
 * InstancesApi - factory interface
 * @export
 */
const InstancesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.InstancesApiFp)(configuration);
    return {
        /**
         *
         * @summary 通过 ID 取消运行实例
         * @param {number} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInstance(id, cid, options) {
            return localVarFp.cancelInstance(id, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 创建流程实例
         * @param {string} name
         * @param {{ [key: string]: object; }} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstance(name, requestBody, cid, options) {
            return localVarFp.createInstance(name, requestBody, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 通过 ID 获取流程实例
         * @param {number} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance(id, cid, options) {
            return localVarFp.getInstance(id, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取实例变量
         * @param {number} id
         * @param {number} scope
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceVariables(id, scope, cid, options) {
            return localVarFp.getInstanceVariables(id, scope, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 查询流程实例
         * @param {string} [name]
         * @param {number} [version]
         * @param {Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>} [status]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances(name, version, status, page, size, cid, options) {
            return localVarFp.getInstances(name, version, status, page, size, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 通过 ID 重试实例
         * @param {number} id
         * @param {number} scope
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolve(id, scope, cid, options) {
            return localVarFp.resolve(id, scope, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 设置实例变量
         * @param {number} id
         * @param {number} scope
         * @param {{ [key: string]: object; }} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInstanceVariables(id, scope, requestBody, cid, options) {
            return localVarFp.setInstanceVariables(id, scope, requestBody, cid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.InstancesApiFactory = InstancesApiFactory;
/**
 * InstancesApi - object-oriented interface
 * @export
 * @class InstancesApi
 * @extends {BaseAPI}
 */
class InstancesApi extends base_1.BaseAPI {
    /**
     *
     * @summary 通过 ID 取消运行实例
     * @param {number} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    cancelInstance(id, cid, options) {
        return (0, exports.InstancesApiFp)(this.configuration).cancelInstance(id, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 创建流程实例
     * @param {string} name
     * @param {{ [key: string]: object; }} requestBody
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    createInstance(name, requestBody, cid, options) {
        return (0, exports.InstancesApiFp)(this.configuration).createInstance(name, requestBody, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 通过 ID 获取流程实例
     * @param {number} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    getInstance(id, cid, options) {
        return (0, exports.InstancesApiFp)(this.configuration).getInstance(id, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取实例变量
     * @param {number} id
     * @param {number} scope
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    getInstanceVariables(id, scope, cid, options) {
        return (0, exports.InstancesApiFp)(this.configuration).getInstanceVariables(id, scope, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 查询流程实例
     * @param {string} [name]
     * @param {number} [version]
     * @param {Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>} [status]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    getInstances(name, version, status, page, size, cid, options) {
        return (0, exports.InstancesApiFp)(this.configuration).getInstances(name, version, status, page, size, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 通过 ID 重试实例
     * @param {number} id
     * @param {number} scope
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    resolve(id, scope, cid, options) {
        return (0, exports.InstancesApiFp)(this.configuration).resolve(id, scope, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 设置实例变量
     * @param {number} id
     * @param {number} scope
     * @param {{ [key: string]: object; }} requestBody
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    setInstanceVariables(id, scope, requestBody, cid, options) {
        return (0, exports.InstancesApiFp)(this.configuration).setInstanceVariables(id, scope, requestBody, cid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.InstancesApi = InstancesApi;
/**
 * MessagesApi - axios parameter creator
 * @export
 */
const MessagesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 发布消息
         * @param {string} name
         * @param {string} key
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage: (name, key, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('createMessage', 'name', name);
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('createMessage', 'key', key);
            const localVarPath = `/v1/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.MessagesApiAxiosParamCreator = MessagesApiAxiosParamCreator;
/**
 * MessagesApi - functional programming interface
 * @export
 */
const MessagesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MessagesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary 发布消息
         * @param {string} name
         * @param {string} key
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage(name, key, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMessage(name, key, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.MessagesApiFp = MessagesApiFp;
/**
 * MessagesApi - factory interface
 * @export
 */
const MessagesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MessagesApiFp)(configuration);
    return {
        /**
         *
         * @summary 发布消息
         * @param {string} name
         * @param {string} key
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage(name, key, cid, options) {
            return localVarFp.createMessage(name, key, cid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.MessagesApiFactory = MessagesApiFactory;
/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
class MessagesApi extends base_1.BaseAPI {
    /**
     *
     * @summary 发布消息
     * @param {string} name
     * @param {string} key
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    createMessage(name, key, cid, options) {
        return (0, exports.MessagesApiFp)(this.configuration).createMessage(name, key, cid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MessagesApi = MessagesApi;
/**
 * ProcessesApi - axios parameter creator
 * @export
 */
const ProcessesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 创建流程
         * @param {string} body
         * @param {string} [cid]
         * @param {boolean} [base64]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcess: (body, cid, base64, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('createProcess', 'body', body);
            const localVarPath = `/v1/process`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            if (base64 !== undefined) {
                localVarQueryParameter['base64'] = base64;
            }
            localVarHeaderParameter['Content-Type'] = 'application/xml';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 通过名称获取流程
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess: (name, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('getProcess', 'name', name);
            const localVarPath = `/v1/process/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 通过名称与版本号获取流程
         * @param {string} name
         * @param {number} version
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess1: (name, version, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('getProcess1', 'name', name);
            // verify required parameter 'version' is not null or undefined
            (0, common_1.assertParamExists)('getProcess1', 'version', version);
            const localVarPath = `/v1/process/{name}/{version}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取流程列表
         * @param {string} [q]
         * @param {string} [cid]
         * @param {number} [page]
         * @param {number} [size]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcesses: (q, cid, page, size, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/processes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ProcessesApiAxiosParamCreator = ProcessesApiAxiosParamCreator;
/**
 * ProcessesApi - functional programming interface
 * @export
 */
const ProcessesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProcessesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary 创建流程
         * @param {string} body
         * @param {string} [cid]
         * @param {boolean} [base64]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcess(body, cid, base64, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createProcess(body, cid, base64, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 通过名称获取流程
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess(name, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProcess(name, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 通过名称与版本号获取流程
         * @param {string} name
         * @param {number} version
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess1(name, version, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProcess1(name, version, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取流程列表
         * @param {string} [q]
         * @param {string} [cid]
         * @param {number} [page]
         * @param {number} [size]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcesses(q, cid, page, size, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProcesses(q, cid, page, size, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ProcessesApiFp = ProcessesApiFp;
/**
 * ProcessesApi - factory interface
 * @export
 */
const ProcessesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProcessesApiFp)(configuration);
    return {
        /**
         *
         * @summary 创建流程
         * @param {string} body
         * @param {string} [cid]
         * @param {boolean} [base64]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcess(body, cid, base64, options) {
            return localVarFp.createProcess(body, cid, base64, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 通过名称获取流程
         * @param {string} name
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess(name, cid, options) {
            return localVarFp.getProcess(name, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 通过名称与版本号获取流程
         * @param {string} name
         * @param {number} version
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess1(name, version, cid, options) {
            return localVarFp.getProcess1(name, version, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取流程列表
         * @param {string} [q]
         * @param {string} [cid]
         * @param {number} [page]
         * @param {number} [size]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcesses(q, cid, page, size, options) {
            return localVarFp.getProcesses(q, cid, page, size, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProcessesApiFactory = ProcessesApiFactory;
/**
 * ProcessesApi - object-oriented interface
 * @export
 * @class ProcessesApi
 * @extends {BaseAPI}
 */
class ProcessesApi extends base_1.BaseAPI {
    /**
     *
     * @summary 创建流程
     * @param {string} body
     * @param {string} [cid]
     * @param {boolean} [base64]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesApi
     */
    createProcess(body, cid, base64, options) {
        return (0, exports.ProcessesApiFp)(this.configuration).createProcess(body, cid, base64, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 通过名称获取流程
     * @param {string} name
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesApi
     */
    getProcess(name, cid, options) {
        return (0, exports.ProcessesApiFp)(this.configuration).getProcess(name, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 通过名称与版本号获取流程
     * @param {string} name
     * @param {number} version
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesApi
     */
    getProcess1(name, version, cid, options) {
        return (0, exports.ProcessesApiFp)(this.configuration).getProcess1(name, version, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取流程列表
     * @param {string} [q]
     * @param {string} [cid]
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesApi
     */
    getProcesses(q, cid, page, size, options) {
        return (0, exports.ProcessesApiFp)(this.configuration).getProcesses(q, cid, page, size, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProcessesApi = ProcessesApi;
/**
 * TriggersApi - axios parameter creator
 * @export
 */
const TriggersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 获取触发器支持的事件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperations: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/trigger-operations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取流程关联的触发器
         * @param {string} process
         * @param {string} [opt]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTriggerKeys: (process, opt, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'process' is not null or undefined
            (0, common_1.assertParamExists)('getTriggerKeys', 'process', process);
            const localVarPath = `/v1/process/{process}/trigger`
                .replace(`{${"process"}}`, encodeURIComponent(String(process)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (opt !== undefined) {
                localVarQueryParameter['opt'] = opt;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取触发器的目标流程
         * @param {string} key
         * @param {string} [opt]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTriggerProcess: (key, opt, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('getTriggerProcess', 'key', key);
            const localVarPath = `/v1/trigger/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (opt !== undefined) {
                localVarQueryParameter['opt'] = opt;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 设置触发器
         * @param {string} key
         * @param {string} opt
         * @param {Set<string>} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTriggerProcess: (key, opt, requestBody, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'key' is not null or undefined
            (0, common_1.assertParamExists)('setTriggerProcess', 'key', key);
            // verify required parameter 'opt' is not null or undefined
            (0, common_1.assertParamExists)('setTriggerProcess', 'opt', opt);
            // verify required parameter 'requestBody' is not null or undefined
            (0, common_1.assertParamExists)('setTriggerProcess', 'requestBody', requestBody);
            const localVarPath = `/v1/trigger/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (opt !== undefined) {
                localVarQueryParameter['opt'] = opt;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.TriggersApiAxiosParamCreator = TriggersApiAxiosParamCreator;
/**
 * TriggersApi - functional programming interface
 * @export
 */
const TriggersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TriggersApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary 获取触发器支持的事件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperations(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOperations(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取流程关联的触发器
         * @param {string} process
         * @param {string} [opt]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTriggerKeys(process, opt, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTriggerKeys(process, opt, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取触发器的目标流程
         * @param {string} key
         * @param {string} [opt]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTriggerProcess(key, opt, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTriggerProcess(key, opt, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 设置触发器
         * @param {string} key
         * @param {string} opt
         * @param {Set<string>} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTriggerProcess(key, opt, requestBody, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.setTriggerProcess(key, opt, requestBody, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.TriggersApiFp = TriggersApiFp;
/**
 * TriggersApi - factory interface
 * @export
 */
const TriggersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TriggersApiFp)(configuration);
    return {
        /**
         *
         * @summary 获取触发器支持的事件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperations(options) {
            return localVarFp.getOperations(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取流程关联的触发器
         * @param {string} process
         * @param {string} [opt]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTriggerKeys(process, opt, cid, options) {
            return localVarFp.getTriggerKeys(process, opt, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取触发器的目标流程
         * @param {string} key
         * @param {string} [opt]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTriggerProcess(key, opt, cid, options) {
            return localVarFp.getTriggerProcess(key, opt, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 设置触发器
         * @param {string} key
         * @param {string} opt
         * @param {Set<string>} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTriggerProcess(key, opt, requestBody, cid, options) {
            return localVarFp.setTriggerProcess(key, opt, requestBody, cid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TriggersApiFactory = TriggersApiFactory;
/**
 * TriggersApi - object-oriented interface
 * @export
 * @class TriggersApi
 * @extends {BaseAPI}
 */
class TriggersApi extends base_1.BaseAPI {
    /**
     *
     * @summary 获取触发器支持的事件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    getOperations(options) {
        return (0, exports.TriggersApiFp)(this.configuration).getOperations(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取流程关联的触发器
     * @param {string} process
     * @param {string} [opt]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    getTriggerKeys(process, opt, cid, options) {
        return (0, exports.TriggersApiFp)(this.configuration).getTriggerKeys(process, opt, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取触发器的目标流程
     * @param {string} key
     * @param {string} [opt]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    getTriggerProcess(key, opt, cid, options) {
        return (0, exports.TriggersApiFp)(this.configuration).getTriggerProcess(key, opt, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 设置触发器
     * @param {string} key
     * @param {string} opt
     * @param {Set<string>} requestBody
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    setTriggerProcess(key, opt, requestBody, cid, options) {
        return (0, exports.TriggersApiFp)(this.configuration).setTriggerProcess(key, opt, requestBody, cid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TriggersApi = TriggersApi;
/**
 * UserTasksApi - axios parameter creator
 * @export
 */
const UserTasksApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 完成用户任务
         * @param {number} id
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeUserTask: (id, requestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('completeUserTask', 'id', id);
            // verify required parameter 'requestBody' is not null or undefined
            (0, common_1.assertParamExists)('completeUserTask', 'requestBody', requestBody);
            const localVarPath = `/v1/task/{id}/completion`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取用户任务
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTask: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getUserTask', 'id', id);
            const localVarPath = `/v1/task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取用户任务
         * @param {number} [page]
         * @param {number} [size]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTasks: (page, size, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.UserTasksApiAxiosParamCreator = UserTasksApiAxiosParamCreator;
/**
 * UserTasksApi - functional programming interface
 * @export
 */
const UserTasksApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.UserTasksApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary 完成用户任务
         * @param {number} id
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeUserTask(id, requestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.completeUserTask(id, requestBody, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取用户任务
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTask(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserTask(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取用户任务
         * @param {number} [page]
         * @param {number} [size]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTasks(page, size, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserTasks(page, size, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.UserTasksApiFp = UserTasksApiFp;
/**
 * UserTasksApi - factory interface
 * @export
 */
const UserTasksApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.UserTasksApiFp)(configuration);
    return {
        /**
         *
         * @summary 完成用户任务
         * @param {number} id
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeUserTask(id, requestBody, options) {
            return localVarFp.completeUserTask(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取用户任务
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTask(id, options) {
            return localVarFp.getUserTask(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取用户任务
         * @param {number} [page]
         * @param {number} [size]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTasks(page, size, options) {
            return localVarFp.getUserTasks(page, size, options).then((request) => request(axios, basePath));
        },
    };
};
exports.UserTasksApiFactory = UserTasksApiFactory;
/**
 * UserTasksApi - object-oriented interface
 * @export
 * @class UserTasksApi
 * @extends {BaseAPI}
 */
class UserTasksApi extends base_1.BaseAPI {
    /**
     *
     * @summary 完成用户任务
     * @param {number} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTasksApi
     */
    completeUserTask(id, requestBody, options) {
        return (0, exports.UserTasksApiFp)(this.configuration).completeUserTask(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取用户任务
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTasksApi
     */
    getUserTask(id, options) {
        return (0, exports.UserTasksApiFp)(this.configuration).getUserTask(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取用户任务
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTasksApi
     */
    getUserTasks(page, size, options) {
        return (0, exports.UserTasksApiFp)(this.configuration).getUserTasks(page, size, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UserTasksApi = UserTasksApi;
