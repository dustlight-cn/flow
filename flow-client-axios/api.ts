/* tslint:disable */
/* eslint-disable */
/**
 * 流程服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@dustlight.cn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InstanceError
 */
export interface InstanceError {
    /**
     * 
     * @type {string}
     * @memberof InstanceError
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof InstanceError
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface InstanceObject
 */
export interface InstanceObject {
    /**
     * 
     * @type {string}
     * @memberof InstanceObject
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof InstanceObject
     */
    version?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof InstanceObject
     */
    events?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof InstanceObject
     */
    clientId?: string;
    /**
     * 
     * @type {number}
     * @memberof InstanceObject
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof InstanceObject
     */
    elementType?: string;
    /**
     * 
     * @type {string}
     * @memberof InstanceObject
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof InstanceObject
     */
    status?: InstanceObjectStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof InstanceObject
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof InstanceObject
     */
    elementId?: string;
    /**
     * 
     * @type {InstanceError}
     * @memberof InstanceObject
     */
    error?: InstanceError;
}

/**
    * @export
    * @enum {string}
    */
export enum InstanceObjectStatusEnum {
    Active = 'ACTIVE',
    Canceled = 'CANCELED',
    Completed = 'COMPLETED',
    Incident = 'INCIDENT',
    Resolved = 'RESOLVED'
}

/**
 * 
 * @export
 * @interface ProcessObject
 */
export interface ProcessObject {
    /**
     * 
     * @type {string}
     * @memberof ProcessObject
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof ProcessObject
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ProcessObject
     */
    owner?: string;
    /**
     * 
     * @type {number}
     * @memberof ProcessObject
     */
    version?: number;
    /**
     * 
     * @type {object}
     * @memberof ProcessObject
     */
    data?: object;
    /**
     * 
     * @type {string}
     * @memberof ProcessObject
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessObject
     */
    createdAt?: string;
}
/**
 * 
 * @export
 * @interface QueryResultInstanceObject
 */
export interface QueryResultInstanceObject {
    /**
     * 
     * @type {number}
     * @memberof QueryResultInstanceObject
     */
    count?: number;
    /**
     * 
     * @type {Array<InstanceObject>}
     * @memberof QueryResultInstanceObject
     */
    data?: Array<InstanceObject>;
}
/**
 * 
 * @export
 * @interface QueryResultProcessObject
 */
export interface QueryResultProcessObject {
    /**
     * 
     * @type {number}
     * @memberof QueryResultProcessObject
     */
    count?: number;
    /**
     * 
     * @type {Array<ProcessObject>}
     * @memberof QueryResultProcessObject
     */
    data?: Array<ProcessObject>;
}
/**
 * 
 * @export
 * @interface QueryResultUserTask
 */
export interface QueryResultUserTask {
    /**
     * 
     * @type {number}
     * @memberof QueryResultUserTask
     */
    count?: number;
    /**
     * 
     * @type {Array<UserTask>}
     * @memberof QueryResultUserTask
     */
    data?: Array<UserTask>;
}
/**
 * 
 * @export
 * @interface UserTask
 */
export interface UserTask {
    /**
     * 
     * @type {number}
     * @memberof UserTask
     */
    id?: number;
    /**
     * 
     * @type {UserTaskTarget}
     * @memberof UserTask
     */
    target?: UserTaskTarget;
    /**
     * 
     * @type {string}
     * @memberof UserTask
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTask
     */
    completedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTask
     */
    form?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UserTask
     */
    variables?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof UserTask
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTask
     */
    elementId?: string;
    /**
     * 
     * @type {number}
     * @memberof UserTask
     */
    instanceId?: number;
    /**
     * 
     * @type {string}
     * @memberof UserTask
     */
    processName?: string;
    /**
     * 
     * @type {number}
     * @memberof UserTask
     */
    processId?: number;
}
/**
 * 
 * @export
 * @interface UserTaskTarget
 */
export interface UserTaskTarget {
    /**
     * 
     * @type {Array<string>}
     * @memberof UserTaskTarget
     */
    roles?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserTaskTarget
     */
    users?: Array<string>;
}

/**
 * InstancesApi - axios parameter creator
 * @export
 */
export const InstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 通过 ID 取消运行实例
         * @param {number} id 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInstance: async (id: number, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancelInstance', 'id', id)
            const localVarPath = `/v1/instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建流程实例
         * @param {string} name 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstance: async (name: string, requestBody: { [key: string]: object; }, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createInstance', 'name', name)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('createInstance', 'requestBody', requestBody)
            const localVarPath = `/v1/instance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 通过 ID 获取流程实例
         * @param {number} id 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance: async (id: number, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getInstance', 'id', id)
            const localVarPath = `/v1/instance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取实例变量
         * @param {number} id 
         * @param {number} scope 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceVariables: async (id: number, scope: number, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getInstanceVariables', 'id', id)
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('getInstanceVariables', 'scope', scope)
            const localVarPath = `/v1/instance/{id}/variables/{scope}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询流程实例
         * @param {string} [name] 
         * @param {number} [version] 
         * @param {Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>} [status] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances: async (name?: string, version?: number, status?: Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>, page?: number, size?: number, cid?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (status) {
                localVarQueryParameter['status'] = Array.from(status);
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 通过 ID 重试实例
         * @param {number} id 
         * @param {number} scope 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolve: async (id: number, scope: number, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resolve', 'id', id)
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('resolve', 'scope', scope)
            const localVarPath = `/v1/instance/{id}/resolve/{scope}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 设置实例变量
         * @param {number} id 
         * @param {number} scope 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInstanceVariables: async (id: number, scope: number, requestBody: { [key: string]: object; }, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('setInstanceVariables', 'id', id)
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('setInstanceVariables', 'scope', scope)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('setInstanceVariables', 'requestBody', requestBody)
            const localVarPath = `/v1/instance/{id}/variables/{scope}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstancesApi - functional programming interface
 * @export
 */
export const InstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 通过 ID 取消运行实例
         * @param {number} id 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelInstance(id: number, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelInstance(id, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 创建流程实例
         * @param {string} name 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInstance(name: string, requestBody: { [key: string]: object; }, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInstance(name, requestBody, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 通过 ID 获取流程实例
         * @param {number} id 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstance(id: number, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstance(id, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取实例变量
         * @param {number} id 
         * @param {number} scope 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstanceVariables(id: number, scope: number, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstanceVariables(id, scope, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 查询流程实例
         * @param {string} [name] 
         * @param {number} [version] 
         * @param {Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>} [status] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances(name?: string, version?: number, status?: Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>, page?: number, size?: number, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultInstanceObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances(name, version, status, page, size, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 通过 ID 重试实例
         * @param {number} id 
         * @param {number} scope 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolve(id: number, scope: number, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolve(id, scope, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 设置实例变量
         * @param {number} id 
         * @param {number} scope 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setInstanceVariables(id: number, scope: number, requestBody: { [key: string]: object; }, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setInstanceVariables(id, scope, requestBody, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InstancesApi - factory interface
 * @export
 */
export const InstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InstancesApiFp(configuration)
    return {
        /**
         * 
         * @summary 通过 ID 取消运行实例
         * @param {number} id 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInstance(id: number, cid?: string, options?: any): AxiosPromise<void> {
            return localVarFp.cancelInstance(id, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建流程实例
         * @param {string} name 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstance(name: string, requestBody: { [key: string]: object; }, cid?: string, options?: any): AxiosPromise<InstanceObject> {
            return localVarFp.createInstance(name, requestBody, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 通过 ID 获取流程实例
         * @param {number} id 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance(id: number, cid?: string, options?: any): AxiosPromise<InstanceObject> {
            return localVarFp.getInstance(id, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取实例变量
         * @param {number} id 
         * @param {number} scope 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceVariables(id: number, scope: number, cid?: string, options?: any): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getInstanceVariables(id, scope, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询流程实例
         * @param {string} [name] 
         * @param {number} [version] 
         * @param {Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>} [status] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances(name?: string, version?: number, status?: Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>, page?: number, size?: number, cid?: string, options?: any): AxiosPromise<QueryResultInstanceObject> {
            return localVarFp.getInstances(name, version, status, page, size, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 通过 ID 重试实例
         * @param {number} id 
         * @param {number} scope 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolve(id: number, scope: number, cid?: string, options?: any): AxiosPromise<void> {
            return localVarFp.resolve(id, scope, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 设置实例变量
         * @param {number} id 
         * @param {number} scope 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInstanceVariables(id: number, scope: number, requestBody: { [key: string]: object; }, cid?: string, options?: any): AxiosPromise<void> {
            return localVarFp.setInstanceVariables(id, scope, requestBody, cid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InstancesApi - object-oriented interface
 * @export
 * @class InstancesApi
 * @extends {BaseAPI}
 */
export class InstancesApi extends BaseAPI {
    /**
     * 
     * @summary 通过 ID 取消运行实例
     * @param {number} id 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    public cancelInstance(id: number, cid?: string, options?: any) {
        return InstancesApiFp(this.configuration).cancelInstance(id, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建流程实例
     * @param {string} name 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    public createInstance(name: string, requestBody: { [key: string]: object; }, cid?: string, options?: any) {
        return InstancesApiFp(this.configuration).createInstance(name, requestBody, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 通过 ID 获取流程实例
     * @param {number} id 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    public getInstance(id: number, cid?: string, options?: any) {
        return InstancesApiFp(this.configuration).getInstance(id, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取实例变量
     * @param {number} id 
     * @param {number} scope 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    public getInstanceVariables(id: number, scope: number, cid?: string, options?: any) {
        return InstancesApiFp(this.configuration).getInstanceVariables(id, scope, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询流程实例
     * @param {string} [name] 
     * @param {number} [version] 
     * @param {Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>} [status] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    public getInstances(name?: string, version?: number, status?: Set<'ACTIVE' | 'CANCELED' | 'COMPLETED' | 'INCIDENT' | 'RESOLVED'>, page?: number, size?: number, cid?: string, options?: any) {
        return InstancesApiFp(this.configuration).getInstances(name, version, status, page, size, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 通过 ID 重试实例
     * @param {number} id 
     * @param {number} scope 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    public resolve(id: number, scope: number, cid?: string, options?: any) {
        return InstancesApiFp(this.configuration).resolve(id, scope, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 设置实例变量
     * @param {number} id 
     * @param {number} scope 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    public setInstanceVariables(id: number, scope: number, requestBody: { [key: string]: object; }, cid?: string, options?: any) {
        return InstancesApiFp(this.configuration).setInstanceVariables(id, scope, requestBody, cid, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessagesApi - axios parameter creator
 * @export
 */
export const MessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 发布消息
         * @param {string} name 
         * @param {string} key 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage: async (name: string, key: string, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createMessage', 'name', name)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('createMessage', 'key', key)
            const localVarPath = `/v1/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 发布消息
         * @param {string} name 
         * @param {string} key 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMessage(name: string, key: string, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMessage(name, key, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagesApiFp(configuration)
    return {
        /**
         * 
         * @summary 发布消息
         * @param {string} name 
         * @param {string} key 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage(name: string, key: string, cid?: string, options?: any): AxiosPromise<void> {
            return localVarFp.createMessage(name, key, cid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export class MessagesApi extends BaseAPI {
    /**
     * 
     * @summary 发布消息
     * @param {string} name 
     * @param {string} key 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public createMessage(name: string, key: string, cid?: string, options?: any) {
        return MessagesApiFp(this.configuration).createMessage(name, key, cid, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProcessesApi - axios parameter creator
 * @export
 */
export const ProcessesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建流程
         * @param {string} body 
         * @param {string} [cid] 
         * @param {boolean} [base64] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcess: async (body: string, cid?: string, base64?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createProcess', 'body', body)
            const localVarPath = `/v1/process`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }

            if (base64 !== undefined) {
                localVarQueryParameter['base64'] = base64;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 通过名称获取流程
         * @param {string} name 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess: async (name: string, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getProcess', 'name', name)
            const localVarPath = `/v1/process/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 通过名称与版本号获取流程
         * @param {string} name 
         * @param {number} version 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess1: async (name: string, version: number, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getProcess1', 'name', name)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getProcess1', 'version', version)
            const localVarPath = `/v1/process/{name}/{version}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取流程列表
         * @param {string} [q] 
         * @param {string} [cid] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcesses: async (q?: string, cid?: string, page?: number, size?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/processes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcessesApi - functional programming interface
 * @export
 */
export const ProcessesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProcessesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 创建流程
         * @param {string} body 
         * @param {string} [cid] 
         * @param {boolean} [base64] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProcess(body: string, cid?: string, base64?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProcess(body, cid, base64, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 通过名称获取流程
         * @param {string} name 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcess(name: string, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcess(name, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 通过名称与版本号获取流程
         * @param {string} name 
         * @param {number} version 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcess1(name: string, version: number, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcess1(name, version, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取流程列表
         * @param {string} [q] 
         * @param {string} [cid] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcesses(q?: string, cid?: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultProcessObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcesses(q, cid, page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProcessesApi - factory interface
 * @export
 */
export const ProcessesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProcessesApiFp(configuration)
    return {
        /**
         * 
         * @summary 创建流程
         * @param {string} body 
         * @param {string} [cid] 
         * @param {boolean} [base64] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcess(body: string, cid?: string, base64?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.createProcess(body, cid, base64, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 通过名称获取流程
         * @param {string} name 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess(name: string, cid?: string, options?: any): AxiosPromise<ProcessObject> {
            return localVarFp.getProcess(name, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 通过名称与版本号获取流程
         * @param {string} name 
         * @param {number} version 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcess1(name: string, version: number, cid?: string, options?: any): AxiosPromise<ProcessObject> {
            return localVarFp.getProcess1(name, version, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取流程列表
         * @param {string} [q] 
         * @param {string} [cid] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcesses(q?: string, cid?: string, page?: number, size?: number, options?: any): AxiosPromise<QueryResultProcessObject> {
            return localVarFp.getProcesses(q, cid, page, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProcessesApi - object-oriented interface
 * @export
 * @class ProcessesApi
 * @extends {BaseAPI}
 */
export class ProcessesApi extends BaseAPI {
    /**
     * 
     * @summary 创建流程
     * @param {string} body 
     * @param {string} [cid] 
     * @param {boolean} [base64] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesApi
     */
    public createProcess(body: string, cid?: string, base64?: boolean, options?: any) {
        return ProcessesApiFp(this.configuration).createProcess(body, cid, base64, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 通过名称获取流程
     * @param {string} name 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesApi
     */
    public getProcess(name: string, cid?: string, options?: any) {
        return ProcessesApiFp(this.configuration).getProcess(name, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 通过名称与版本号获取流程
     * @param {string} name 
     * @param {number} version 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesApi
     */
    public getProcess1(name: string, version: number, cid?: string, options?: any) {
        return ProcessesApiFp(this.configuration).getProcess1(name, version, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取流程列表
     * @param {string} [q] 
     * @param {string} [cid] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesApi
     */
    public getProcesses(q?: string, cid?: string, page?: number, size?: number, options?: any) {
        return ProcessesApiFp(this.configuration).getProcesses(q, cid, page, size, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TriggersApi - axios parameter creator
 * @export
 */
export const TriggersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取触发器支持的事件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperations: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/trigger-operations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取流程关联的触发器
         * @param {string} process 
         * @param {string} [opt] 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTriggerKeys: async (process: string, opt?: string, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'process' is not null or undefined
            assertParamExists('getTriggerKeys', 'process', process)
            const localVarPath = `/v1/process/{process}/trigger`
                .replace(`{${"process"}}`, encodeURIComponent(String(process)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (opt !== undefined) {
                localVarQueryParameter['opt'] = opt;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取触发器的目标流程
         * @param {string} key 
         * @param {string} [opt] 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTriggerProcess: async (key: string, opt?: string, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('getTriggerProcess', 'key', key)
            const localVarPath = `/v1/trigger/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (opt !== undefined) {
                localVarQueryParameter['opt'] = opt;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 设置触发器
         * @param {string} key 
         * @param {string} opt 
         * @param {Set<string>} requestBody 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTriggerProcess: async (key: string, opt: string, requestBody: Set<string>, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('setTriggerProcess', 'key', key)
            // verify required parameter 'opt' is not null or undefined
            assertParamExists('setTriggerProcess', 'opt', opt)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('setTriggerProcess', 'requestBody', requestBody)
            const localVarPath = `/v1/trigger/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (opt !== undefined) {
                localVarQueryParameter['opt'] = opt;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TriggersApi - functional programming interface
 * @export
 */
export const TriggersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TriggersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 获取触发器支持的事件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOperations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOperations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取流程关联的触发器
         * @param {string} process 
         * @param {string} [opt] 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTriggerKeys(process: string, opt?: string, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTriggerKeys(process, opt, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取触发器的目标流程
         * @param {string} key 
         * @param {string} [opt] 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTriggerProcess(key: string, opt?: string, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTriggerProcess(key, opt, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 设置触发器
         * @param {string} key 
         * @param {string} opt 
         * @param {Set<string>} requestBody 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setTriggerProcess(key: string, opt: string, requestBody: Set<string>, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setTriggerProcess(key, opt, requestBody, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TriggersApi - factory interface
 * @export
 */
export const TriggersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TriggersApiFp(configuration)
    return {
        /**
         * 
         * @summary 获取触发器支持的事件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperations(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getOperations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取流程关联的触发器
         * @param {string} process 
         * @param {string} [opt] 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTriggerKeys(process: string, opt?: string, cid?: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getTriggerKeys(process, opt, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取触发器的目标流程
         * @param {string} key 
         * @param {string} [opt] 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTriggerProcess(key: string, opt?: string, cid?: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getTriggerProcess(key, opt, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 设置触发器
         * @param {string} key 
         * @param {string} opt 
         * @param {Set<string>} requestBody 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTriggerProcess(key: string, opt: string, requestBody: Set<string>, cid?: string, options?: any): AxiosPromise<void> {
            return localVarFp.setTriggerProcess(key, opt, requestBody, cid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TriggersApi - object-oriented interface
 * @export
 * @class TriggersApi
 * @extends {BaseAPI}
 */
export class TriggersApi extends BaseAPI {
    /**
     * 
     * @summary 获取触发器支持的事件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    public getOperations(options?: any) {
        return TriggersApiFp(this.configuration).getOperations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取流程关联的触发器
     * @param {string} process 
     * @param {string} [opt] 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    public getTriggerKeys(process: string, opt?: string, cid?: string, options?: any) {
        return TriggersApiFp(this.configuration).getTriggerKeys(process, opt, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取触发器的目标流程
     * @param {string} key 
     * @param {string} [opt] 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    public getTriggerProcess(key: string, opt?: string, cid?: string, options?: any) {
        return TriggersApiFp(this.configuration).getTriggerProcess(key, opt, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 设置触发器
     * @param {string} key 
     * @param {string} opt 
     * @param {Set<string>} requestBody 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    public setTriggerProcess(key: string, opt: string, requestBody: Set<string>, cid?: string, options?: any) {
        return TriggersApiFp(this.configuration).setTriggerProcess(key, opt, requestBody, cid, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserTasksApi - axios parameter creator
 * @export
 */
export const UserTasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 完成用户任务
         * @param {number} id 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeUserTask: async (id: number, requestBody: { [key: string]: object; }, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('completeUserTask', 'id', id)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('completeUserTask', 'requestBody', requestBody)
            const localVarPath = `/v1/task/{id}/completion`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户任务
         * @param {number} id 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTask: async (id: number, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserTask', 'id', id)
            const localVarPath = `/v1/task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户任务
         * @param {string} [name] 
         * @param {number} [version] 
         * @param {'DONE' | 'ACTIVE'} [status] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTasks: async (name?: string, version?: number, status?: 'DONE' | 'ACTIVE', page?: number, size?: number, cid?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserTasksApi - functional programming interface
 * @export
 */
export const UserTasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserTasksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 完成用户任务
         * @param {number} id 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeUserTask(id: number, requestBody: { [key: string]: object; }, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeUserTask(id, requestBody, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取用户任务
         * @param {number} id 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTask(id: number, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTask(id, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取用户任务
         * @param {string} [name] 
         * @param {number} [version] 
         * @param {'DONE' | 'ACTIVE'} [status] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTasks(name?: string, version?: number, status?: 'DONE' | 'ACTIVE', page?: number, size?: number, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultUserTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTasks(name, version, status, page, size, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserTasksApi - factory interface
 * @export
 */
export const UserTasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserTasksApiFp(configuration)
    return {
        /**
         * 
         * @summary 完成用户任务
         * @param {number} id 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeUserTask(id: number, requestBody: { [key: string]: object; }, cid?: string, options?: any): AxiosPromise<void> {
            return localVarFp.completeUserTask(id, requestBody, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户任务
         * @param {number} id 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTask(id: number, cid?: string, options?: any): AxiosPromise<UserTask> {
            return localVarFp.getUserTask(id, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户任务
         * @param {string} [name] 
         * @param {number} [version] 
         * @param {'DONE' | 'ACTIVE'} [status] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTasks(name?: string, version?: number, status?: 'DONE' | 'ACTIVE', page?: number, size?: number, cid?: string, options?: any): AxiosPromise<QueryResultUserTask> {
            return localVarFp.getUserTasks(name, version, status, page, size, cid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserTasksApi - object-oriented interface
 * @export
 * @class UserTasksApi
 * @extends {BaseAPI}
 */
export class UserTasksApi extends BaseAPI {
    /**
     * 
     * @summary 完成用户任务
     * @param {number} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTasksApi
     */
    public completeUserTask(id: number, requestBody: { [key: string]: object; }, cid?: string, options?: any) {
        return UserTasksApiFp(this.configuration).completeUserTask(id, requestBody, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取用户任务
     * @param {number} id 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTasksApi
     */
    public getUserTask(id: number, cid?: string, options?: any) {
        return UserTasksApiFp(this.configuration).getUserTask(id, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取用户任务
     * @param {string} [name] 
     * @param {number} [version] 
     * @param {'DONE' | 'ACTIVE'} [status] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTasksApi
     */
    public getUserTasks(name?: string, version?: number, status?: 'DONE' | 'ACTIVE', page?: number, size?: number, cid?: string, options?: any) {
        return UserTasksApiFp(this.configuration).getUserTasks(name, version, status, page, size, cid, options).then((request) => request(this.axios, this.basePath));
    }
}


