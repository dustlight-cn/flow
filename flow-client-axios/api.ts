/* tslint:disable */
/* eslint-disable */
/**
 * 流程服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@goodvoice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BooleanItem
 */
export interface BooleanItem {
    /**
     * 
     * @type {string}
     * @memberof BooleanItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BooleanItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof BooleanItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof BooleanItem
     */
    type?: BooleanItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof BooleanItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BooleanItem
     */
    required?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum BooleanItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT',
    User = 'USER'
}

/**
 * 
 * @export
 * @interface Check
 */
export interface Check {
    /**
     * 
     * @type {ItemGroup}
     * @memberof Check
     */
    require?: ItemGroup;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Check
     */
    acl?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface Context
 */
export interface Context {
    /**
     * 
     * @type {Event}
     * @memberof Context
     */
    event?: Event;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Context
     */
    outputs?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface DateItem
 */
export interface DateItem {
    /**
     * 
     * @type {string}
     * @memberof DateItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DateItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof DateItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof DateItem
     */
    type?: DateItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DateItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DateItem
     */
    required?: boolean;
    /**
     * 
     * @type {RangeableInstant}
     * @memberof DateItem
     */
    dateRange?: RangeableInstant;
}

/**
    * @export
    * @enum {string}
    */
export enum DateItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT',
    User = 'USER'
}

/**
 * 
 * @export
 * @interface DoubleItem
 */
export interface DoubleItem {
    /**
     * 
     * @type {string}
     * @memberof DoubleItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DoubleItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof DoubleItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof DoubleItem
     */
    type?: DoubleItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DoubleItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DoubleItem
     */
    required?: boolean;
    /**
     * 
     * @type {RangeableDouble}
     * @memberof DoubleItem
     */
    doubleRange?: RangeableDouble;
}

/**
    * @export
    * @enum {string}
    */
export enum DoubleItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT',
    User = 'USER'
}

/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    key?: string;
    /**
     * 
     * @type {object}
     * @memberof Event
     */
    data?: object;
}
/**
 * 
 * @export
 * @interface EventSource
 */
export interface EventSource {
    /**
     * 
     * @type {string}
     * @memberof EventSource
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof EventSource
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof EventSource
     */
    eventType?: string;
}
/**
 * 
 * @export
 * @interface FileItem
 */
export interface FileItem {
    /**
     * 
     * @type {string}
     * @memberof FileItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FileItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof FileItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof FileItem
     */
    type?: FileItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof FileItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FileItem
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FileItem
     */
    mime?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FileItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT',
    User = 'USER'
}

/**
 * 
 * @export
 * @interface FormItem
 */
export interface FormItem {
    /**
     * 
     * @type {string}
     * @memberof FormItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FormItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof FormItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof FormItem
     */
    type?: FormItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof FormItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FormItem
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FormItem
     */
    form?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FormItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT',
    User = 'USER'
}

/**
 * 
 * @export
 * @interface IntItem
 */
export interface IntItem {
    /**
     * 
     * @type {string}
     * @memberof IntItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IntItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof IntItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof IntItem
     */
    type?: IntItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof IntItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IntItem
     */
    required?: boolean;
    /**
     * 
     * @type {RangeableInteger}
     * @memberof IntItem
     */
    intRange?: RangeableInteger;
}

/**
    * @export
    * @enum {string}
    */
export enum IntItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT',
    User = 'USER'
}

/**
 * @type Item
 * @export
 */
export type Item = BooleanItem | DateItem | DoubleItem | FileItem | FormItem | IntItem | SelectItem | StringItem | UserItem;

/**
 * 
 * @export
 * @interface ItemGroup
 */
export interface ItemGroup {
    /**
     * 
     * @type {string}
     * @memberof ItemGroup
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemGroup
     */
    description?: string;
    /**
     * 
     * @type {Array<Item>}
     * @memberof ItemGroup
     */
    items?: Array<Item>;
}
/**
 * @type Node
 * @export
 */
export type Node = ScriptNode;

/**
 * 
 * @export
 * @interface Pipeline
 */
export interface Pipeline {
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    clientId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pipeline
     */
    owner?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pipeline
     */
    members?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    description?: string;
    /**
     * 
     * @type {Array<Stage>}
     * @memberof Pipeline
     */
    stages?: Array<Stage>;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Pipeline
     */
    updatedAt?: string;
    /**
     * 
     * @type {Array<Event>}
     * @memberof Pipeline
     */
    trigger?: Array<Event>;
    /**
     * 
     * @type {Array<Node>}
     * @memberof Pipeline
     */
    onSuccess?: Array<Node>;
    /**
     * 
     * @type {Array<Node>}
     * @memberof Pipeline
     */
    onFailed?: Array<Node>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Pipeline
     */
    acl?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface PipelineInstance
 */
export interface PipelineInstance {
    /**
     * 
     * @type {string}
     * @memberof PipelineInstance
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PipelineInstance
     */
    clientId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PipelineInstance
     */
    owner?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PipelineInstance
     */
    members?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PipelineInstance
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof PipelineInstance
     */
    description?: string;
    /**
     * 
     * @type {Array<Stage>}
     * @memberof PipelineInstance
     */
    stages?: Array<Stage>;
    /**
     * 
     * @type {string}
     * @memberof PipelineInstance
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof PipelineInstance
     */
    updatedAt?: string;
    /**
     * 
     * @type {Array<Event>}
     * @memberof PipelineInstance
     */
    trigger?: Array<Event>;
    /**
     * 
     * @type {Array<Node>}
     * @memberof PipelineInstance
     */
    onSuccess?: Array<Node>;
    /**
     * 
     * @type {Array<Node>}
     * @memberof PipelineInstance
     */
    onFailed?: Array<Node>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PipelineInstance
     */
    acl?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof PipelineInstance
     */
    pipeline?: string;
    /**
     * 
     * @type {string}
     * @memberof PipelineInstance
     */
    status?: PipelineInstanceStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof PipelineInstance
     */
    current?: number;
    /**
     * 
     * @type {Context}
     * @memberof PipelineInstance
     */
    context?: Context;
    /**
     * 
     * @type {string}
     * @memberof PipelineInstance
     */
    currentStage?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PipelineInstance
     */
    done?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum PipelineInstanceStatusEnum {
    Blocking = 'BLOCKING',
    Running = 'RUNNING',
    Success = 'SUCCESS',
    Failed = 'FAILED'
}

/**
 * 
 * @export
 * @interface RangeableDouble
 */
export interface RangeableDouble {
    /**
     * 
     * @type {number}
     * @memberof RangeableDouble
     */
    min?: number;
    /**
     * 
     * @type {number}
     * @memberof RangeableDouble
     */
    max?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RangeableDouble
     */
    openInterval?: boolean;
}
/**
 * 
 * @export
 * @interface RangeableInstant
 */
export interface RangeableInstant {
    /**
     * 
     * @type {string}
     * @memberof RangeableInstant
     */
    min?: string;
    /**
     * 
     * @type {string}
     * @memberof RangeableInstant
     */
    max?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RangeableInstant
     */
    openInterval?: boolean;
}
/**
 * 
 * @export
 * @interface RangeableInteger
 */
export interface RangeableInteger {
    /**
     * 
     * @type {number}
     * @memberof RangeableInteger
     */
    min?: number;
    /**
     * 
     * @type {number}
     * @memberof RangeableInteger
     */
    max?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RangeableInteger
     */
    openInterval?: boolean;
}
/**
 * 
 * @export
 * @interface ScriptNode
 */
export interface ScriptNode {
    /**
     * 
     * @type {string}
     * @memberof ScriptNode
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ScriptNode
     */
    type?: ScriptNodeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ScriptNode
     */
    language?: string;
    /**
     * 
     * @type {string}
     * @memberof ScriptNode
     */
    script?: string;
    /**
     * 
     * @type {string}
     * @memberof ScriptNode
     */
    main?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ScriptNodeTypeEnum {
    Script = 'SCRIPT'
}

/**
 * 
 * @export
 * @interface SelectItem
 */
export interface SelectItem {
    /**
     * 
     * @type {string}
     * @memberof SelectItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SelectItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SelectItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SelectItem
     */
    type?: SelectItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof SelectItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SelectItem
     */
    required?: boolean;
    /**
     * 
     * @type {RangeableInteger}
     * @memberof SelectItem
     */
    selectedRange?: RangeableInteger;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof SelectItem
     */
    options?: { [key: string]: string; };
}

/**
    * @export
    * @enum {string}
    */
export enum SelectItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT',
    User = 'USER'
}

/**
 * 
 * @export
 * @interface Stage
 */
export interface Stage {
    /**
     * 
     * @type {string}
     * @memberof Stage
     */
    title?: string;
    /**
     * 
     * @type {Array<Node>}
     * @memberof Stage
     */
    before?: Array<Node>;
    /**
     * 
     * @type {Array<Node>}
     * @memberof Stage
     */
    when?: Array<Node>;
    /**
     * 
     * @type {Array<Node>}
     * @memberof Stage
     */
    after?: Array<Node>;
    /**
     * 
     * @type {Check}
     * @memberof Stage
     */
    check?: Check;
}
/**
 * 
 * @export
 * @interface StringItem
 */
export interface StringItem {
    /**
     * 
     * @type {string}
     * @memberof StringItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof StringItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof StringItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof StringItem
     */
    type?: StringItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof StringItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StringItem
     */
    required?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StringItem
     */
    multiline?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StringItem
     */
    html?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StringItem
     */
    regex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum StringItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT',
    User = 'USER'
}

/**
 * 
 * @export
 * @interface UserItem
 */
export interface UserItem {
    /**
     * 
     * @type {string}
     * @memberof UserItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof UserItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UserItem
     */
    type?: UserItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof UserItem
     */
    array?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserItem
     */
    required?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum UserItemTypeEnum {
    Int = 'INT',
    Double = 'DOUBLE',
    String = 'STRING',
    Date = 'DATE',
    Boolean = 'BOOLEAN',
    Form = 'FORM',
    File = 'FILE',
    Select = 'SELECT',
    User = 'USER'
}


/**
 * EventApi - axios parameter creator
 * @export
 */
export const EventApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSources: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/events/sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventApi - functional programming interface
 * @export
 */
export const EventApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSources(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventSource>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSources(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventApi - factory interface
 * @export
 */
export const EventApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSources(options?: any): AxiosPromise<Array<EventSource>> {
            return localVarFp.getSources(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventApi - object-oriented interface
 * @export
 * @class EventApi
 * @extends {BaseAPI}
 */
export class EventApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public getSources(options?: any) {
        return EventApiFp(this.configuration).getSources(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InstanceApi - axios parameter creator
 * @export
 */
export const InstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 确认检查点
         * @param {string} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCheckpoint: async (id: string, body?: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('confirmCheckpoint', 'id', id)
            const localVarPath = `/v1/instances/{id}/checkpoint`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 否认检查点
         * @param {string} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denyCheckpoint: async (id: string, body?: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('denyCheckpoint', 'id', id)
            const localVarPath = `/v1/instances/{id}/checkpoint`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取流水线实例
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getInstance', 'id', id)
            const localVarPath = `/v1/instances/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查找记录流水线实例
         * @param {string} recordId 
         * @param {string} eventKey 
         * @param {string} [eventType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstancesByRecord: async (recordId: string, eventKey: string, eventType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordId' is not null or undefined
            assertParamExists('getInstancesByRecord', 'recordId', recordId)
            // verify required parameter 'eventKey' is not null or undefined
            assertParamExists('getInstancesByRecord', 'eventKey', eventKey)
            const localVarPath = `/v1/record/{recordId}/instances`
                .replace(`{${"recordId"}}`, encodeURIComponent(String(recordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (eventKey !== undefined) {
                localVarQueryParameter['eventKey'] = eventKey;
            }

            if (eventType !== undefined) {
                localVarQueryParameter['eventType'] = eventType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstanceApi - functional programming interface
 * @export
 */
export const InstanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InstanceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 确认检查点
         * @param {string} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmCheckpoint(id: string, body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmCheckpoint(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 否认检查点
         * @param {string} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async denyCheckpoint(id: string, body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.denyCheckpoint(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取流水线实例
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstance(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineInstance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstance(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 查找记录流水线实例
         * @param {string} recordId 
         * @param {string} eventKey 
         * @param {string} [eventType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstancesByRecord(recordId: string, eventKey: string, eventType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PipelineInstance>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstancesByRecord(recordId, eventKey, eventType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InstanceApi - factory interface
 * @export
 */
export const InstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InstanceApiFp(configuration)
    return {
        /**
         * 
         * @summary 确认检查点
         * @param {string} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCheckpoint(id: string, body?: object, options?: any): AxiosPromise<void> {
            return localVarFp.confirmCheckpoint(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 否认检查点
         * @param {string} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denyCheckpoint(id: string, body?: object, options?: any): AxiosPromise<void> {
            return localVarFp.denyCheckpoint(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取流水线实例
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance(id: string, options?: any): AxiosPromise<PipelineInstance> {
            return localVarFp.getInstance(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查找记录流水线实例
         * @param {string} recordId 
         * @param {string} eventKey 
         * @param {string} [eventType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstancesByRecord(recordId: string, eventKey: string, eventType?: string, options?: any): AxiosPromise<Array<PipelineInstance>> {
            return localVarFp.getInstancesByRecord(recordId, eventKey, eventType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InstanceApi - object-oriented interface
 * @export
 * @class InstanceApi
 * @extends {BaseAPI}
 */
export class InstanceApi extends BaseAPI {
    /**
     * 
     * @summary 确认检查点
     * @param {string} id 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceApi
     */
    public confirmCheckpoint(id: string, body?: object, options?: any) {
        return InstanceApiFp(this.configuration).confirmCheckpoint(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 否认检查点
     * @param {string} id 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceApi
     */
    public denyCheckpoint(id: string, body?: object, options?: any) {
        return InstanceApiFp(this.configuration).denyCheckpoint(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取流水线实例
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceApi
     */
    public getInstance(id: string, options?: any) {
        return InstanceApiFp(this.configuration).getInstance(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查找记录流水线实例
     * @param {string} recordId 
     * @param {string} eventKey 
     * @param {string} [eventType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceApi
     */
    public getInstancesByRecord(recordId: string, eventKey: string, eventType?: string, options?: any) {
        return InstanceApiFp(this.configuration).getInstancesByRecord(recordId, eventKey, eventType, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PipelineApi - axios parameter creator
 * @export
 */
export const PipelineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建流水线
         * @param {Pipeline} pipeline 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPipeline: async (pipeline: Pipeline, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pipeline' is not null or undefined
            assertParamExists('createPipeline', 'pipeline', pipeline)
            const localVarPath = `/v1/pipelines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pipeline, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除流水线
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePipeline', 'id', id)
            const localVarPath = `/v1/pipelines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查找表单流水线
         * @param {string} formName 
         * @param {string} [eventType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormPipelines: async (formName: string, eventType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'formName' is not null or undefined
            assertParamExists('getFormPipelines', 'formName', formName)
            const localVarPath = `/v1/forms/{formName}/instances`
                .replace(`{${"formName"}}`, encodeURIComponent(String(formName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (eventType !== undefined) {
                localVarQueryParameter['eventType'] = eventType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取流水线
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPipeline: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPipeline', 'id', id)
            const localVarPath = `/v1/pipelines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新流水线
         * @param {string} id 
         * @param {Pipeline} pipeline 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePipeline: async (id: string, pipeline: Pipeline, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePipeline', 'id', id)
            // verify required parameter 'pipeline' is not null or undefined
            assertParamExists('updatePipeline', 'pipeline', pipeline)
            const localVarPath = `/v1/pipelines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pipeline, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PipelineApi - functional programming interface
 * @export
 */
export const PipelineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PipelineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 创建流水线
         * @param {Pipeline} pipeline 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPipeline(pipeline: Pipeline, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pipeline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPipeline(pipeline, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除流水线
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePipeline(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePipeline(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 查找表单流水线
         * @param {string} formName 
         * @param {string} [eventType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormPipelines(formName: string, eventType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pipeline>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFormPipelines(formName, eventType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取流水线
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPipeline(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pipeline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPipeline(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新流水线
         * @param {string} id 
         * @param {Pipeline} pipeline 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePipeline(id: string, pipeline: Pipeline, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pipeline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePipeline(id, pipeline, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PipelineApi - factory interface
 * @export
 */
export const PipelineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PipelineApiFp(configuration)
    return {
        /**
         * 
         * @summary 创建流水线
         * @param {Pipeline} pipeline 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPipeline(pipeline: Pipeline, options?: any): AxiosPromise<Pipeline> {
            return localVarFp.createPipeline(pipeline, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除流水线
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePipeline(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查找表单流水线
         * @param {string} formName 
         * @param {string} [eventType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormPipelines(formName: string, eventType?: string, options?: any): AxiosPromise<Array<Pipeline>> {
            return localVarFp.getFormPipelines(formName, eventType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取流水线
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPipeline(id: string, options?: any): AxiosPromise<Pipeline> {
            return localVarFp.getPipeline(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新流水线
         * @param {string} id 
         * @param {Pipeline} pipeline 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePipeline(id: string, pipeline: Pipeline, options?: any): AxiosPromise<Pipeline> {
            return localVarFp.updatePipeline(id, pipeline, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PipelineApi - object-oriented interface
 * @export
 * @class PipelineApi
 * @extends {BaseAPI}
 */
export class PipelineApi extends BaseAPI {
    /**
     * 
     * @summary 创建流水线
     * @param {Pipeline} pipeline 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApi
     */
    public createPipeline(pipeline: Pipeline, options?: any) {
        return PipelineApiFp(this.configuration).createPipeline(pipeline, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除流水线
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApi
     */
    public deletePipeline(id: string, options?: any) {
        return PipelineApiFp(this.configuration).deletePipeline(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查找表单流水线
     * @param {string} formName 
     * @param {string} [eventType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApi
     */
    public getFormPipelines(formName: string, eventType?: string, options?: any) {
        return PipelineApiFp(this.configuration).getFormPipelines(formName, eventType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取流水线
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApi
     */
    public getPipeline(id: string, options?: any) {
        return PipelineApiFp(this.configuration).getPipeline(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新流水线
     * @param {string} id 
     * @param {Pipeline} pipeline 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApi
     */
    public updatePipeline(id: string, pipeline: Pipeline, options?: any) {
        return PipelineApiFp(this.configuration).updatePipeline(id, pipeline, options).then((request) => request(this.axios, this.basePath));
    }
}


